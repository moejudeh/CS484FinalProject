---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";

/* Check if the user is authenticated */
const auth = getAuth(app);
if (Astro.cookies.has("session")) {
  const sessionCookie = Astro.cookies.get("session")!.value;
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);
  if (decodedCookie) {
    return Astro.redirect("/dashboard");
  }
}
---

<Layout title="Sign in">
  <div class="container">
    <h1>Sign in</h1>
    <form action="/api/auth/signin" method="post">
      <label for="email" for="email">Email</label>
      <input type="email" name="email" id="email" />
      <label for="password">Password</label>
      <input type="password" name="password" id="password" />
      <button type="submit">Login</button>
    </form>
    <p>New here?<a href="/register">Create an account</a></p>
  </div>
</Layout>
<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from "firebase/auth";
  import { app } from "../firebase/client";

  const auth = getAuth(app);
  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  const form = document.querySelector("form") as HTMLFormElement;
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();

    if (!email || !password) {
      return;
    }
    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );
    const idToken = await userCredential.user.getIdToken();
    const response = await fetch("/api/auth/signin", {
      method: "GET",
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });

    if (response.redirected) {
      window.location.assign(response.url);
    }
  });
</script>

<style>
  body {
    font-family: "Arial", sans-serif;
    background-color: #2c3e50;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
  }

  .container {
    max-width: 400px;
    width: 100%;
    background-color: #ecf0f1;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
    text-align: center;
    box-sizing: border-box;
    display: flex;
    flex-direction: column; /* Add this to make child elements stack vertically */
    justify-content: center; /* Add this to center the content vertically */
  }

  h1 {
    color: #3498db;
  }

  p {
    color: #3498db;
    font-size: 15px;
    margin-top: 20px; /* Add margin to separate from the form */
  }

  label {
    margin-top: 15px;
    color: #3498db;
    display: block;
    text-align: left;
  }

  input {
    padding: 12px;
    margin: 8px 0 20px 0;
    border: 1px solid #3498db;
    border-radius: 4px;
    width: 100%;
    box-sizing: border-box;
  }

  button {
    display: inline-block;
    text-decoration: none;
    color: #3498db;
    font-weight: bold;
    margin: 10px;
    padding: 10px 20px;
    border: 2px solid #3498db;
    border-radius: 5px;
    transition:
      color 0.3s,
      background-color 0.3s;
  }

  button:hover {
    color: #fff;
    background-color: #3498db;
  }

  a {
    display: inline-block;
    text-decoration: none;
    color: #3498db;
    padding: 5px 10px;
    font-size: 15px;
  }
</style>
